{"version":3,"file":"src_app_pages_register_register_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAER;AAE/C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,wDAAY;KACxB;CACF,CAAC;IAMW,yBAAyB,SAAzB,yBAAyB;;AAAzB,yBAAyB;IAJrC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,yBAAyB;AAAA;;;;;;;;;;;;;;;;;;;;;;;AChBG;AACM;AACF;AAEA;AAEyB;AAEvB;IAWlC,kBAAkB,SAAlB,kBAAkB;;AAAlB,kBAAkB;IAT9B,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,+EAAyB;SAC1B;QACD,YAAY,EAAE,CAAC,wDAAY,CAAC;KAC7B,CAAC;GACW,kBAAkB;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACnB8B;AAEZ,CAAC,+BAA+B;AACxC;IAS5B,YAAY,SAAZ,YAAY;IAevB,YAAoB,OAAgB,EAAU,MAAc;QAAxC,YAAO,GAAP,OAAO,CAAS;QAAU,WAAM,GAAN,MAAM,CAAQ;QAd5D,SAAI,GAAS;YACX,EAAE,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE;YACjC,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,EAAE;YACZ,KAAK,EAAE,EAAE;YACT,IAAI,EAAE,MAAM;SACb,CAAC;QAEF,YAAO,GAAY;YACjB,MAAM,EAAE,EAAE;YACV,OAAO,EAAE,EAAE;SACZ;IAG+D,CAAC;IAEjE,QAAQ;IACR,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC,CAAC;IAChD,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAEK,OAAO;;YACX,8BAA8B;YAC9B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEvD,8CAA8C;YAC9C,IAAI,GAAG,IAAI,IAAI,EAAE;gBACf,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;gBAClC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE;gBAClC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBACtD,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC1D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aAC7B;iBACI;gBACH,0BAA0B;gBAC1B,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;aAClC;QACH,CAAC;KAAA;;;;;;AA5CU,YAAY;IALxB,wDAAS,CAAC;QACT,QAAQ,EAAE,cAAc;QACxB,qEAAmC;;KAEpC,CAAC;GACW,YAAY;AAAA","sources":["./src/app/pages/register/register-routing.module.ts","./src/app/pages/register/register.module.ts","./src/app/pages/register/register.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\nimport { RegisterPage } from './register.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RegisterPageRoutingModule\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { User } from '../../interfaces/user';\nimport { Storage } from '@ionic/storage-angular'; // npm i @ionic/storage-angular\nimport { Router } from '@angular/router';\nimport { IonSelect } from '@ionic/angular';\nimport { Classes } from '../../interfaces/classes';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n  user: User = {\n    id: this.idGenerator().toString(),\n    username: '',\n    password: '',\n    email: '',\n    type: 'user'\n  };\n\n  classes: Classes = {\n    userId: '',\n    classes: []\n  }\n  \n\n  constructor(private storage: Storage, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  idGenerator() {\n    return Math.floor(Math.random() * 1000000000);\n  }\n\n  onSubmit() {\n    this.guardar();\n  }\n\n  async guardar() {\n    // we check if the user exists\n    const usr = await this.storage.get(this.user.username);\n\n    // if its null (not exist) we create a new one\n    if (usr == null) {\n      console.log('Usuario registrado');\n      this.classes.userId = this.user.id\n      await this.storage.set(this.user.username, this.user);\n      await this.storage.set(this.classes.userId, this.classes);\n      this.router.navigate(['/']);\n    }\n    else {\n      // else we dont do nothing\n      console.log('Usuario ya existe');\n    }\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}